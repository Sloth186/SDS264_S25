---
title: "R Tip of the Day"
subtitle: "Timevis"
author: "Shen Rothermel"
date: "March 20, 2025"
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: true
    preview-links: auto
editor_options: 
  chunk_output_type: console
---

```{r Libraries}
library(nycflights13)
library(stringr)
library(tidyverse)
library(timevis)
```

## Timevis

::: {.fragment .fade-in}
Package for making timelines
:::

::: {.fragment .fade-in}
```{r}
#| echo: true
timevis()
```
:::

## Dataset

We will use the `flight`s dataset for our examples

::: {.fragment .fade-in}
```{r}
head(flights)
```
:::

::: {.fragment .fade-in}
Each row contains information about a single flight, including the date it occurred, departure and arrival time, origin and destination, etc.
:::

## Supplying a Data Frame

::: {.fragment .fade-in}
`timevis()` takes a `data frame`, which is a base R object type.
:::

::: {.fragment .fade-in}
This data frame must at a minimum have a `content` and a `start` variable. The former determines what text to put in the box, and the latter determines where along the timeline to put the box.
:::

::: {.fragment .fade-in}
With our `flights` dataset, we can do our usual tidyverse magic, then use the `as.data.frame()` function to easily convert it into a data frame.
:::

## Building the Data Frame

```{.r code-line-numbers="0|1-4|6-7|8|9-10|11-13|0"}
timevis_date <- function(year, month, day, time) {
	paste(year, "-", month, "-", day, " ",
	str_sub(time, 1, -3), ":", str_sub(time, -2, -1), sep = "")
}

sample_flights <- flights |>
	filter(!is.na(dep_time), !is.na(arr_time)) |> 
	slice_sample(n = 5) |>
	mutate(content = paste(origin, " to ", dest, sep = ""),
				 start = timevis_date(year, month, day, dep_time)) |>
	select(content, start) |>
	arrange(date(start)) |> 
	as.data.frame()
sample_flights
```

::: {.fragment .fade-in}
```{r}
timevis_date <- function(year, month, day, time) {
	paste(year, "-", month, "-", day, " ",
				str_sub(time, 1, -3), ":", str_sub(time, -2, -1), sep = "")
}

sample_flights <- flights |>
	filter(!is.na(dep_time), !is.na(arr_time)) |> 
	slice_sample(n = 5) |>
	mutate(content = paste(origin, " to ", dest, sep = ""),
				 start = timevis_date(year, month, day, dep_time)) |>
	select(content, start) |>
	arrange(date(start)) |> 
	as.data.frame()
sample_flights
```
:::

## Visualize

```r
timevis(sample_flights)
```

```{r}
timevis(sample_flights, height = 300)
arrange(sample_flights, date(start))
```

## Point Items

::: {.fragment .fade-in}
```r
sample_flights <- sample_flights |>
	mutate(type = "point")
```
:::

::: {.fragment .fade-in}
```{r}
sample_flights <- sample_flights |> 
	mutate(type = "point")
sample_flights
```
:::

::: {.fragment .fade-in}
```{r}
timevis(sample_flights)
```
:::

## Dynamic Editing

```{r}
#| echo: true
timevis(sample_flights, options = list(editable = TRUE))
```

## Ranged Item

```{r}
ranged_flight <- flights |> 
	slice_max(air_time) |> 
	mutate(content = paste(origin, " to ", dest, sep = ""),
				 start = timevis_date(year, month, day, dep_time),
				 end = timevis_date(year, month, day, arr_time)) |> 
	select(content, start, end) |> 
	as.data.frame()
ranged_flight
timevis(ranged_flight)
```

## Grouped Items {.smaller}

```{r}
group_to_id <- c("EWR" = 1, "LGA" = 2, "JFK" = 3)

grouped_flights <- flights |> 
	filter(month == sample(1:12, 1), day == sample(1:28, 1), arr_time > dep_time) |>
	group_by(origin) |> 
	slice_sample(n = 3) |> 
	mutate(content = dest,
				 start = timevis_date(year, month, day, dep_time),
				 end = timevis_date(year, month, day, arr_time),
				 group = group_to_id[origin]) |>
	select(content, start, end, group) |>
	as.data.frame()
groups_frame <- data.frame(id = 1:3, content = c("EWR", "LGA", "JFK"))
```

::: panel-tabset
### Code

```{.r code-line-numbers="0|3|8|11|0"}
grouped_flights <- flights |> 
	filter(month == sample(1:12, 1), day == sample(1:28, 1), arr_time > dep_time) |>
	group_by(origin) |> 
	slice_sample(n = 3) |> 
	mutate(content = dest,
				 start = timevis_date(year, month, day, dep_time),
				 end = timevis_date(year, month, day, arr_time),
				 group = group_to_id[origin]) |>
	select(content, start, end, group) |>
	as.data.frame()
groups_frame <- data.frame(id = 1:3, content = c("EWR", "LGA", "JFK"))
```

### Data Frames

```{r}
#| echo: true
grouped_flights
groups_frame
```

### Timeline

```{r}
#| echo: true
timevis(grouped_flights, groups = groups_frame)
```
:::

## Alternative: Pipes {auto-animate="true" auto-animate-easing="ease-in-out"}

::: {.fragment .fade-in}
timevis() also works well with pipes, as the package includes a lot of manipulation functions.
:::

::: {.fragment .fade-in}
```{r}
#| echo: true
timevis() |>
	addItem(list(id = "item1", content = "one", start = "2016-08-01")) |>
  centerItem("item1")
```
:::

## Alternative: Pipes {auto-animate="true" auto-animate-easing="ease-in-out"}

timevis() also works well with pipes, as the package includes a lot of manipulation functions.

```{r}
#| echo: true
timevis() |>
	addItem(list(id = "item1", content = "one", start = "2016-08-01")) |>
	addItem(list(id = "item2", content = "two", start = "2016-08-09", end = "2016-08-17")) |>
	addItem(list(id = "item3", content = "three", start = "2016-08-22", type = "point")) |>
	centerItem("item2")
```

## More!

::: incremental
- HTML within the `content` variable can help to effectively display any type of data
- Can use CSS to customize the appearance of the timeline
- Groups can be nested
- A timevis object be obtained as a Javascript object for further modifications/interactions not supported by the API
:::

## Thank you!